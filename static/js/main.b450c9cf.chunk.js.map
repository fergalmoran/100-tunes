{"version":3,"sources":["components/TuneTitle.tsx","components/TuneList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TuneTitle","props","url","MixList","useState","tunes","setTunes","useEffect","a","fetch","json","mixes","console","error","getData","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","row","title","Avatar","alt","src","image","id","m","App","Typography","variant","color","className","component","gutterBottom","TuneList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAMeA,EAJG,SAACC,GACf,OAAO,mCAAGA,EAAMC,OC4DLC,EAnDC,WAAO,IAAD,EACQC,mBAAiB,IADzB,mBACXC,EADW,KACJC,EADI,KAkBlB,OAhBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,+EAGEC,MACF,0FAJA,8BAMNC,OANM,OAEFC,EAFE,OAORL,EAASK,GAPD,gDASRC,QAAQC,MAAM,WAAY,UAA1B,MATQ,yDAAH,qDAYbC,KACD,IAGC,gCACI,eAACC,EAAA,EAAD,CAAOC,KAAK,QAAZ,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAGR,cAACC,EAAA,EAAD,UACKhB,EAAMiB,KAAI,SAACC,GAAD,OACP,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAYI,EAAIrB,MAChB,cAACiB,EAAA,EAAD,UACI,cAAC,EAAD,CAAWjB,IAAKqB,EAAIC,UAExB,cAACL,EAAA,EAAD,CAAWC,MAAM,QAAjB,SACI,cAACK,EAAA,EAAD,CACIC,IAAKH,EAAIC,MACTG,IAAKJ,EAAIK,YARNL,EAAIM,YAe9BxB,EAAMiB,KAAI,SAACQ,GAAD,OACP,yCAAuBA,EAAE5B,MAAf4B,EAAED,WClCbE,MAnBf,WACI,OACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAlC,SACI,sBAAKC,UAAU,MAAf,UACI,cAACH,EAAA,EAAD,CACII,UAAU,KACVH,QAAQ,KACRC,MAAM,UACNG,cAAY,EAJhB,uBASA,cAACC,EAAD,UCJDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b450c9cf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TuneTitle = (props: { url: string }) => {\n    return <>{props.url}</>;\n};\n\nexport default TuneTitle;\n","import {\n    Avatar,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Tune from \"../models/tune\";\nimport TuneTitle from \"./TuneTitle\";\n\nconst MixList = () => {\n    const [tunes, setTunes] = useState<Tune[]>([]);\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                const mixes: Tune[] = await (\n                    await fetch(\n                        \"https://raw.githubusercontent.com/fergalmoran/100-tunes/develop/public/data/tunes.json\"\n                    )\n                ).json();\n                setTunes(mixes);\n            } catch (err) {\n                console.error(\"TuneList\", \"getData\", err);\n            }\n        };\n        getData();\n    }, []);\n\n    return (\n        <div>\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Link</TableCell>\n                        <TableCell>Title</TableCell>\n                        <TableCell align=\"right\">Preview</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tunes.map((row) => (\n                        <TableRow key={row.id}>\n                            <TableCell>{row.url}</TableCell>\n                            <TableCell>\n                                <TuneTitle url={row.title} />\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                <Avatar\n                                    alt={row.title}\n                                    src={row.image}\n                                />\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n            {tunes.map((m) => (\n                <pre key={m.id}>Fart: {m.url}</pre>\n            ))}\n        </div>\n    );\n};\nexport default MixList;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./App.css\";\nimport TuneList from \"./components/TuneList\";\n\nfunction App() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\">\n            <div className=\"App\">\n                <Typography\n                    component=\"h2\"\n                    variant=\"h6\"\n                    color=\"primary\"\n                    gutterBottom\n                >\n                    100 Tunes\n                </Typography>\n\n                <TuneList />\n            </div>\n        </Typography>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}