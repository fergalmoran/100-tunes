{"version":3,"sources":["components/TuneTitle.tsx","components/TunePlayer.tsx","components/TuneList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TuneTitle","props","url","muiTheme","createMuiTheme","useStyles","makeStyles","theme","root","breakpoints","down","width","loopIcon","color","display","playIcon","volumeIcon","volumeSlider","progressTime","mainSlider","TunePlayer","ThemeProvider","rounded","elevation","volume","variation","spacing","download","autoplay","order","loop","src","videoId","MixList","useState","tunes","setTunes","useEffect","a","fetch","process","json","mixes","console","error","getData","Table","size","TableHead","TableRow","TableCell","TableBody","map","tune","align","id","Avatar","alt","title","image","index","Link","href","variant","icon","marginRight","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","flexDirection","cardMedia","cardContent","flexGrow","footer","App","classes","Fragment","CssBaseline","AppBar","position","Toolbar","className","Typography","noWrap","Container","maxWidth","TuneList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAMeA,EAJG,SAACC,GACf,OAAO,mCAAGA,EAAMC,O,0CCCdC,EAAWC,YAAe,IAE1BC,EAAYC,aAAW,SAACC,GAC1B,MAAO,CACHC,KAAK,eACAD,EAAME,YAAYC,KAAK,MAAQ,CAC5BC,MAAO,SAGfC,SAAS,aACLC,MAAO,UACP,aAAc,CACVA,MAAO,WAEX,UAAW,CACPA,MAAO,YAEVN,EAAME,YAAYC,KAAK,MAAQ,CAC5BI,QAAS,SAGjBC,SAAU,CACNF,MAAO,UACP,UAAW,CACPA,MAAO,YAGfG,WAAY,CACRH,MAAO,uBAEXI,aAAc,CACVJ,MAAO,SAEXK,aAAc,CACVL,MAAO,uBAEXM,WAAY,CACRN,MAAO,UACP,oBAAqB,CACjBA,MAAO,WAEX,qBAAsB,CAClBA,MAAO,WAEX,qBAAsB,CAClBA,MAAO,gBA2BRO,EArBI,SAACnB,GAChB,OACI,cAACoB,EAAA,EAAD,CAAed,MAAOJ,EAAtB,SACI,cAAC,IAAD,CACIE,UAAWA,EACXiB,SAAS,EACTC,UAAW,IACXZ,MAAM,OACNa,QAAQ,EACRC,UAAU,YACVC,QAAS,EACTC,UAAU,EACVC,UAAU,EACVC,MAAM,WACNC,MAAM,EACNC,IAAG,iEAA4D9B,EAAM+B,QAAlE,aCKJC,EA7DC,WAAO,IAAD,EACQC,mBAAiB,IADzB,mBACXC,EADW,KACJC,EADI,KAgBlB,OAdAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,+EAGEC,MAAM,GAAD,OAAIC,aAAJ,qBAHP,8BAINC,OAJM,OAEFC,EAFE,OAKRN,EAASM,GALD,gDAORC,QAAQC,MAAM,WAAY,UAA1B,MAPQ,yDAAH,qDAUbC,KACD,IAGC,8BACI,eAACC,EAAA,EAAD,CAAOC,KAAK,QAAZ,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,gBACA,cAACA,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,wBAGR,cAACC,EAAA,EAAD,UACKhB,EAAMiB,KAAI,SAACC,GAAD,OACP,eAACJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWI,MAAM,SAAjB,SAA2BD,EAAKE,KAChC,cAACL,EAAA,EAAD,CAAWI,MAAM,SAAjB,SACI,cAACE,EAAA,EAAD,CAAQC,IAAKJ,EAAKK,MAAO3B,IAAKsB,EAAKM,UAEvC,cAACT,EAAA,EAAD,UACI,cAAC,EAAD,CAAWhD,IAAKmD,EAAKK,UAEzB,cAACR,EAAA,EAAD,UACI,cAAC,EAAD,CAEIU,MAAOP,EAAKE,GACZvB,QAASqB,EAAKrB,SAFTqB,EAAKE,MAKlB,cAACL,EAAA,EAAD,UACI,cAACW,EAAA,EAAD,CACIC,KAAMT,EAAKnD,IACXW,MAAM,UACNkD,QAAQ,QAHZ,sBAhBOV,EAAKE,e,iBC9BtClD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCyD,KAAM,CACFC,YAAa1D,EAAMmB,QAAQ,IAE/BwC,YAAa,CACTC,gBAAiB5D,EAAM6D,QAAQC,WAAWC,MAC1CC,QAAShE,EAAMmB,QAAQ,EAAG,EAAG,IAEjC8C,YAAa,CACTC,UAAWlE,EAAMmB,QAAQ,IAE7BgD,SAAU,CACNC,WAAYpE,EAAMmB,QAAQ,GAC1BkD,cAAerE,EAAMmB,QAAQ,IAEjCmD,KAAM,CACFC,OAAQ,OACRhE,QAAS,OACTiE,cAAe,UAEnBC,UAAW,CACPL,WAAY,UAEhBM,YAAa,CACTC,SAAU,GAEdC,OAAQ,CACJhB,gBAAiB5D,EAAM6D,QAAQC,WAAWC,MAC1CC,QAAShE,EAAMmB,QAAQ,QA0BhB0D,MAtBf,WACI,IAAMC,EAAUhF,IAChB,OACI,eAAC,IAAMiF,SAAP,WACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,WAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAC,IAAD,CAAWC,UAAWN,EAAQrB,OAC9B,cAAC4B,EAAA,EAAD,CAAY7B,QAAQ,KAAKlD,MAAM,UAAUgF,QAAM,EAA/C,+BAKR,+BACI,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACI,cAACC,EAAD,YC/CLC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fe9a5f6b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TuneTitle = (props: { url: string }) => {\n    return <>{props.url}</>;\n};\n\nexport default TuneTitle;\n","import React from \"react\";\nimport { createMuiTheme, makeStyles, ThemeProvider } from \"@material-ui/core\";\nimport AudioPlayer from \"material-ui-audio-player\";\n\nconst muiTheme = createMuiTheme({});\n\nconst useStyles = makeStyles((theme: any) => {\n    return {\n        root: {\n            [theme.breakpoints.down(\"sm\")]: {\n                width: \"100%\",\n            },\n        },\n        loopIcon: {\n            color: \"#3f51b5\",\n            \"&.selected\": {\n                color: \"#0921a9\",\n            },\n            \"&:hover\": {\n                color: \"#7986cb\",\n            },\n            [theme.breakpoints.down(\"sm\")]: {\n                display: \"none\",\n            },\n        },\n        playIcon: {\n            color: \"#f50057\",\n            \"&:hover\": {\n                color: \"#ff4081\",\n            },\n        },\n        volumeIcon: {\n            color: \"rgba(0, 0, 0, 0.54)\",\n        },\n        volumeSlider: {\n            color: \"black\",\n        },\n        progressTime: {\n            color: \"rgba(0, 0, 0, 0.54)\",\n        },\n        mainSlider: {\n            color: \"#3f51b5\",\n            \"& .MuiSlider-rail\": {\n                color: \"#7986cb\",\n            },\n            \"& .MuiSlider-track\": {\n                color: \"#3f51b5\",\n            },\n            \"& .MuiSlider-thumb\": {\n                color: \"#303f9f\",\n            },\n        },\n    };\n});\n\nconst TunePlayer = (props: { videoId: string; index: number }) => {\n    return (\n        <ThemeProvider theme={muiTheme}>\n            <AudioPlayer\n                useStyles={useStyles}\n                rounded={true}\n                elevation={100}\n                width=\"100%\"\n                volume={false}\n                variation=\"secondary\"\n                spacing={3}\n                download={false}\n                autoplay={false}\n                order=\"standart\"\n                loop={false}\n                src={`https://cdn.podnoms.com/fmstuff/100songs/audio/working/${props.videoId}.mp3`}\n            />\n        </ThemeProvider>\n    );\n};\n\nexport default TunePlayer;\n","import {\n    Avatar,\n    Link,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Tune from \"../models/tune\";\nimport TuneTitle from \"./TuneTitle\";\nimport TunePlayer from \"./TunePlayer\";\n\nconst MixList = () => {\n    const [tunes, setTunes] = useState<Tune[]>([]);\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                const mixes: Tune[] = await (\n                    await fetch(`${process.env.PUBLIC_URL}/data/tunes.json`)\n                ).json();\n                setTunes(mixes);\n            } catch (err) {\n                console.error(\"TuneList\", \"getData\", err);\n            }\n        };\n        getData();\n    }, []);\n\n    return (\n        <div>\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>#</TableCell>\n                        <TableCell></TableCell>\n                        <TableCell>Title</TableCell>\n                        <TableCell>Play</TableCell>\n                        <TableCell>Link</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tunes.map((tune) => (\n                        <TableRow key={tune.id}>\n                            <TableCell align=\"center\">{tune.id}</TableCell>\n                            <TableCell align=\"center\">\n                                <Avatar alt={tune.title} src={tune.image} />\n                            </TableCell>\n                            <TableCell>\n                                <TuneTitle url={tune.title} />\n                            </TableCell>\n                            <TableCell>\n                                <TunePlayer\n                                    key={tune.id}\n                                    index={tune.id}\n                                    videoId={tune.videoId}\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <Link\n                                    href={tune.url}\n                                    color=\"inherit\"\n                                    variant=\"body2\"\n                                >\n                                    Open\n                                </Link>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\nexport default MixList;\n","import {\n    AppBar,\n    Container,\n    CssBaseline,\n    makeStyles,\n    Toolbar,\n    Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./App.css\";\nimport TuneList from \"./components/TuneList\";\nimport AlbumIcon from \"@material-ui/icons/Album\";\nimport { Tune } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    heroContent: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n    },\n    card: {\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    cardMedia: {\n        paddingTop: \"56.25%\", // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"relative\">\n                <Toolbar>\n                    <AlbumIcon className={classes.icon} />\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        100 Tunes!!!\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <main>\n                <Container maxWidth=\"xl\">\n                    <TuneList />\n                </Container>\n            </main>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}